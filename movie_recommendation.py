# -*- coding: utf-8 -*-
"""Movie_Recommendation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iS4iigQMWr_nnIiAinzaDcIfmBDy0OyJ
"""

import zipfile
zip_ref = zipfile .ZipFile('/content/ratings.csv.zip','r')
zip_ref.extractall('/content')
zip_ref.close()

import pandas as pd
import matplotlib.pyplot as plt
from wordcloud import WordCloud
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel
from sklearn.metrics.pairwise import cosine_similarity

movies = pd.read_csv('/content/movies.csv')
ratings = pd.read_csv('/content/ratings.csv')

movies.info()

ratings.info()

movies.shape

ratings.shape

movies.describe()

ratings.describe()

genres=[]
for genre in movies.genres:

    x=genre.split('|')
    for i in x:
         if i not in genres:
            genres.append(str(i))
genres=str(genres)
movie_title=[]
for title in movies.title:
    movie_title.append(title[0:-7])
movie_title=str(movie_title)

print(genres)
print(movie_title)

df=pd.merge(ratings,movies, how='left',on='movieId')
df.head()

df1=df.groupby(['title'])[['rating']].sum()
high_rated=df1.nlargest(20,'rating')
high_rated.head()

plt.figure(figsize=(30,10))
plt.title('Top 20 movies with highest rating',fontsize=40)
plt.ylabel('ratings',fontsize=30)
plt.xticks(fontsize=18,rotation=90)
plt.xlabel('movies title',fontsize=30)
plt.yticks(fontsize=25)
plt.bar(high_rated.index,high_rated['rating'],linewidth=3)

df2=df.groupby('title')[['rating']].count()
rating_count_20=df2.nlargest(20,'rating')
rating_count_20.head()

plt.figure(figsize=(30,10))
plt.title('Top 20 movies with highest number of ratings',fontsize=30)
plt.xticks(fontsize=18,rotation=90)
plt.yticks(fontsize=18)
plt.xlabel('movies title',fontsize=30)
plt.ylabel('ratings',fontsize=30)

plt.bar(rating_count_20.index,rating_count_20.rating)

cv=TfidfVectorizer()
tfidf_matrix=cv.fit_transform(movies['genres'])

movie_user = df.pivot_table(index='userId',columns='title',values='rating')
movie_user

user_item_matrix = df.pivot_table(index='userId',columns='title',values='rating')
user_item_matrix = user_item_matrix.fillna(0)

user_item_matrix

# Calculate the cosine similarity between movies
movie_similarity = cosine_similarity(user_item_matrix.T)
movie_similarity_df = pd.DataFrame(movie_similarity, index=user_item_matrix.columns, columns=user_item_matrix.columns)

movie_similarity_df



def recommend_movies(fav_genre, fav_movie, n=5):
    # Filter movies by favorite genre
    genre_movies = ratings_data[ratings_data['genres'].str.contains(fav_genre)]

    # Filter movies similar to favorite movie
    if fav_movie in user_item_matrix.columns:
        similar_movies = movie_similarity_df[fav_movie].sort_values(ascending=False).index[1:n+1]
    else:
        similar_movies = []

    # Combine and return recommended movies
    recommended_movies = genre_movies[genre_movies['title'].isin(similar_movies)]['title'].unique()
    return recommended_movies[:n]

!pip install streamlit

import streamlit as st

st.title("Movie Recommendation System")

fav_genre = st.text_input("Enter Your Favorite Genre:")
fav_movie = st.text_input("Enter Your Favorite Movie:")

if st.button("Get Recommendations"):
    recommendations = recommend_movies(fav_genre, fav_movie)
    st.write("Recommended movies based on your favorite genre and movie:")
    st.write(recommendations)

!streamlit run /usr/local/lib/python3.10/dist-packages/colab_kernel_launcher.py [ARGUMENTS]

